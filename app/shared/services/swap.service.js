"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var http_1 = require("@angular/common/http");
var environment_1 = require("../../environment");
var SwapService = /** @class */ (function () {
    function SwapService(http) {
        this.http = http;
        this.baseUrl = 'swaprequests/';
    }
    SwapService.prototype.sendSwapRequest = function (swapRequest) {
        return this.http.post(environment_1.environment.host + this.baseUrl + 'save', swapRequest);
    };
    SwapService.prototype.getUserSwapRequests = function (userId) {
        return this.http.get(environment_1.environment.host + this.baseUrl + 'all');
    };
    SwapService.prototype.updateSwapRequest = function (swapRequest) {
        return this.http.post(environment_1.environment.host + this.baseUrl + 'update', swapRequest);
    };
    SwapService.prototype.updateSwapRequestStatusBool = function (swapRequestId) {
        return this.http.get(environment_1.environment.host + this.baseUrl + 'update-statusbool/' + swapRequestId);
    };
    SwapService.prototype.countSwapRequests = function (userId) {
        return this.http.get(environment_1.environment.host + this.baseUrl + 'count/' + userId);
    };
    SwapService.prototype.countNewSwapRequests = function (userId) {
        return this.http.get(environment_1.environment.host + this.baseUrl + 'count/new/' + userId);
    };
    SwapService = __decorate([
        core_1.Injectable(),
        __metadata("design:paramtypes", [http_1.HttpClient])
    ], SwapService);
    return SwapService;
}());
exports.SwapService = SwapService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3dhcC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic3dhcC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsc0NBQXlDO0FBRXpDLDZDQUE2RDtBQUU3RCxpREFBZ0Q7QUFHaEQ7SUFJSSxxQkFBb0IsSUFBZ0I7UUFBaEIsU0FBSSxHQUFKLElBQUksQ0FBWTtRQUZwQyxZQUFPLEdBQVcsZUFBZSxDQUFDO0lBRUssQ0FBQztJQUV4QyxxQ0FBZSxHQUFmLFVBQWdCLFdBQXdCO1FBQ3RDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyx5QkFBVyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sRUFBRSxXQUFXLENBQUMsQ0FBQztJQUMvRSxDQUFDO0lBRUQseUNBQW1CLEdBQW5CLFVBQW9CLE1BQWM7UUFDaEMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLHlCQUFXLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDLENBQUM7SUFDaEUsQ0FBQztJQUVELHVDQUFpQixHQUFqQixVQUFrQixXQUF3QjtRQUN4QyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMseUJBQVcsQ0FBQyxJQUFJLEdBQUUsSUFBSSxDQUFDLE9BQU8sR0FBRyxRQUFRLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFDaEYsQ0FBQztJQUVELGlEQUEyQixHQUEzQixVQUE0QixhQUFxQjtRQUMvQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMseUJBQVcsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLE9BQU8sR0FBRyxvQkFBb0IsR0FBRyxhQUFhLENBQUMsQ0FBQztJQUMvRixDQUFDO0lBRUQsdUNBQWlCLEdBQWpCLFVBQWtCLE1BQWM7UUFDOUIsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLHlCQUFXLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxPQUFPLEdBQUcsUUFBUSxHQUFHLE1BQU0sQ0FBQyxDQUFBO0lBQzNFLENBQUM7SUFFRCwwQ0FBb0IsR0FBcEIsVUFBcUIsTUFBYztRQUNqQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMseUJBQVcsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLE9BQU8sR0FBRyxZQUFZLEdBQUcsTUFBTSxDQUFDLENBQUE7SUFDL0UsQ0FBQztJQTVCUSxXQUFXO1FBRHZCLGlCQUFVLEVBQUU7eUNBS2lCLGlCQUFVO09BSjNCLFdBQVcsQ0E2QnZCO0lBQUQsa0JBQUM7Q0FBQSxBQTdCRCxJQTZCQztBQTdCWSxrQ0FBVyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SW5qZWN0YWJsZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7T2JzZXJ2YWJsZX0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7SHR0cENsaWVudCwgSHR0cEhlYWRlcnN9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcclxuaW1wb3J0IHtTd2FwUmVxdWVzdH0gZnJvbSAnLi4vLi4vZHRvL3N3YXAtcmVxdWVzdCc7XHJcbmltcG9ydCB7IGVudmlyb25tZW50IH0gZnJvbSAnLi4vLi4vZW52aXJvbm1lbnQnO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgU3dhcFNlcnZpY2Uge1xyXG5cclxuICAgIGJhc2VVcmw6IHN0cmluZyA9ICdzd2FwcmVxdWVzdHMvJztcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGh0dHA6IEh0dHBDbGllbnQpIHt9XHJcblxyXG4gICAgc2VuZFN3YXBSZXF1ZXN0KHN3YXBSZXF1ZXN0OiBTd2FwUmVxdWVzdCk6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICAgIHJldHVybiB0aGlzLmh0dHAucG9zdChlbnZpcm9ubWVudC5ob3N0ICsgdGhpcy5iYXNlVXJsICsgJ3NhdmUnLCBzd2FwUmVxdWVzdCk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0VXNlclN3YXBSZXF1ZXN0cyh1c2VySWQ6IG51bWJlcik6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0KGVudmlyb25tZW50Lmhvc3QgKyB0aGlzLmJhc2VVcmwgKyAnYWxsJyk7XHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlU3dhcFJlcXVlc3Qoc3dhcFJlcXVlc3Q6IFN3YXBSZXF1ZXN0KTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgICAgcmV0dXJuIHRoaXMuaHR0cC5wb3N0KGVudmlyb25tZW50Lmhvc3QgK3RoaXMuYmFzZVVybCArICd1cGRhdGUnLCBzd2FwUmVxdWVzdCk7XHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlU3dhcFJlcXVlc3RTdGF0dXNCb29sKHN3YXBSZXF1ZXN0SWQ6IG51bWJlcik6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0KGVudmlyb25tZW50Lmhvc3QgKyB0aGlzLmJhc2VVcmwgKyAndXBkYXRlLXN0YXR1c2Jvb2wvJyArIHN3YXBSZXF1ZXN0SWQpO1xyXG4gICAgfVxyXG5cclxuICAgIGNvdW50U3dhcFJlcXVlc3RzKHVzZXJJZDogbnVtYmVyKTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQoZW52aXJvbm1lbnQuaG9zdCArIHRoaXMuYmFzZVVybCArICdjb3VudC8nICsgdXNlcklkKVxyXG4gICAgfVxyXG5cclxuICAgIGNvdW50TmV3U3dhcFJlcXVlc3RzKHVzZXJJZDogbnVtYmVyKTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQoZW52aXJvbm1lbnQuaG9zdCArIHRoaXMuYmFzZVVybCArICdjb3VudC9uZXcvJyArIHVzZXJJZClcclxuICAgIH1cclxufVxyXG4iXX0=